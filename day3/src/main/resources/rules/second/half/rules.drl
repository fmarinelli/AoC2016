import learning.aoc.day3.second.model.TriangleWithId

dialect "mvel"

rule "validate triangle on first column"
    when
        TriangleWithId(((id % 3) == 0), $id1: id, $a1: a)
        TriangleWithId($id2: id == ($id1 + 1), $a2: a)
        TriangleWithId($id3: id == ($id1 + 2), $a3: a)
        eval($a1 + $a2 > $a3)
        eval($a1 + $a3 > $a2)
        eval($a3 + $a2 > $a1)
        not String(this == "A" + $id1)
    then
        insert("A" + $id1)
        String value = $id1+":"+$a1+"-"+$a2+"-"+$a3;
        System.out.println("Match on first: "+value);
        channels["valid"].send(value);
end

rule "validate triangle on second column"
    when
        TriangleWithId(((id % 3) == 0), $id1: id, $b1: b)
        TriangleWithId($id2: id == ($id1 + 1), $b2: b)
        TriangleWithId($id3: id == ($id1 + 2), $b3: b)
        eval($b1 + $b2 > $b3)
        eval($b1 + $b3 > $b2)
        eval($b3 + $b2 > $b1)
        not String(this == "B" + $id1)
    then
        insert("B" + $id1)
        String value = $id1+":"+$b1+"-"+$b2+"-"+$b3;
        System.out.println("Match on second: "+value);
        channels["valid"].send(value);
end

rule "validate triangle on third column"
    when
        TriangleWithId(((id % 3) == 0), $id1: id, $c1: c)
        TriangleWithId($id2: id == ($id1 + 1), $c2: c)
        TriangleWithId($id3: id == ($id1 + 2), $c3: c)
        eval($c1 + $c2 > $c3)
        eval($c1 + $c3 > $c2)
        eval($c3 + $c2 > $c1)
        not String(this == "C" + $id1)
    then
        insert("B" + $id1)
        String value = $id1+":"+$c1+"-"+$c2+"-"+$c3;
        System.out.println("Match on third: "+value);
        channels["valid"].send(value);
end
